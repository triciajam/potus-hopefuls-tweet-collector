export PATH="$PATH:~/Desktop/Projects/twitcamp"

export TC_OUTF="hrc,fiorina"
export TC_USEHASH="TRUE,TRUE"
export TC_USENONHASH="TRUE,TRUE"
export TC_WORDS="hillaryclinton,hillary_clinton,hillary2016 fiorina,carly2016"

env | grep TC

Make sure the target folder exists (in this case, test)
python application.py test TRUE TRUE hillaryclinton,hillary2016
python application.py test,test2 TRUE,TRUE TRUE,TRUE hillaryclinton,hillary2016 cannes,lions


Start here for EB
http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-common-steps.html
BUT had to install awsecbli this way at end of thread (uninstall the reg way)
https://forums.aws.amazon.com/thread.jspa?messageID=580745
Finished This.

Other one that might be helpful:
http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-reference-get-started.html

virtual environment


ssh -i thesis.pem ec2-user@
aws ec2 get-console-output --instance-id i-a80c0401 --region us-east-1

NOTES: 
I need to install everything I will need for my script into my virtual environment.  
This creates the corrcet requirements.txt file.
Everything in requirements.txt will be loaded automatically by the EC2 instance.
Directory is /home/ec2-user

tail /var/log/httpd/error_log for errors


ec2-54-152-215-99.compute-1.amazonaws.com
ec2-52-7-91-120.compute-1.amazonaws.com
ec2-54-174-203-69.compute-1.amazonaws.com
ec2-54-175-166-152.compute-1.amazonaws.com
ec2-52-6-195-31.compute-1.amazonaws.com
ec2-52-0-203-2.compute-1.amazonaws.com



## FOR AUTO-SCALING


aws iam create-instance-profile --instance-profile-name ec2_terminate

{
    "InstanceProfile": {
        "InstanceProfileId": "AIPAIUTJRG6IZ7JCUCSRK", 
        "Roles": [], 
        "CreateDate": "2015-06-30T19:02:07.118Z", 
        "InstanceProfileName": "ec2_terminate", 
        "Path": "/", 
        "Arn": "arn:aws:iam::520531084022:instance-profile/ec2_terminate"
    }
}


aws iam create-role \
        --role-name ec2_terminate \
        --assume-role-policy-document file://role.json

{
    "Role": {
        "AssumeRolePolicyDocument": {
            "Statement": [
                {
                    "Action": "sts:AssumeRole", 
                    "Sid": "", 
                    "Effect": "Allow", 
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    }
                }
            ]
        }, 
        "RoleId": "AROAIZTP7LTE3TXYOE4NM", 
        "CreateDate": "2015-06-30T19:04:15.486Z", 
        "RoleName": "ec2_terminate", 
        "Path": "/", 
        "Arn": "arn:aws:iam::520531084022:role/ec2_terminate"
    }
}

aws iam add-role-to-instance-profile \
      --instance-profile-name ec2_terminate \
      --role-name ec2_terminate

ami_id=ami-1ecae776 # Amazon Linux
region=us-east-1    # Region for running the demo
zone=${region}e     # A zone in that region
launch_config=lc-cand-mentions
auto_scale_group=ag-cand-mentions

export EC2_URL=https://$region.ec2.amazonaws.com
export AWS_AUTO_SCALING_URL=https://autoscaling.$region.amazonaws.com

# this one is for shutting down
aws autoscaling create-launch-configuration \
   --launch-configuration-name $launch_config \
   --image-id $ami_id \
   --iam-instance-profile arn:aws:iam::520531084022:instance-profile/ec2_terminate \
   --key-name thesis \
   --security-groups triciajam_SG_useast \
   --instance-type t2.micro \
   --user-data file://tc_aws_start.sh 

# this is for accessing buckets
# arn:aws:iam::520531084022:instance-profile/access-buckets

aws autoscaling delete-auto-scaling-group --auto-scaling-group-name $auto_scale_group
aws autoscaling delete-launch-configuration --launch-configuration-name $launch_config

. tc_s3_upload.sh twit-candi-2016/dist/ 

aws autoscaling create-launch-configuration \
   --launch-configuration-name $launch_config \
   --image-id $ami_id \
   --iam-instance-profile arn:aws:iam::520531084022:instance-profile/access-buckets \
   --key-name thesis \
   --security-groups triciajam_SG_useast \
   --instance-type t2.micro \
   --user-data file://tc_aws_start.sh 


aws autoscaling  create-auto-scaling-group \
    --auto-scaling-group-name $auto_scale_group \
    --launch-configuration-name $launch_config \
    --min-size 0 \
    --max-size 0 \
    --availability-zones $zone \
    --tags "Key=Name,Value=recurring-instance"

aws autoscaling suspend-processes \
    --auto-scaling-group-name $auto_scale_group \
    --scaling-processes ReplaceUnhealthy

aws autoscaling put-scheduled-update-group-action \
    --scheduled-action-name start \
    --auto-scaling-group-name $auto_scale_group \
    --min-size 1 \
    --max-size 1 \
    --desired-capacity 1 \
    --recurrence "0 16 * * *"

aws autoscaling put-scheduled-update-group-action \
    --scheduled-action-name cleanup \
    --auto-scaling-group-name $auto_scale_group \
    --min-size 0 \
    --max-size 0 \
    --recurrence "15 19 * * *"

aws autoscaling describe-scaling-activities

aws autoscaling delete-auto-scaling-group --auto-scaling-group-name $auto_scale_group
aws autoscaling delete-launch-configuration --launch-configuration-name $launch_config


---

# didn't work on amazon linux
#ssh -i thesis.pem ec2-user@ec2-54-174-15-153.compute-1.amazonaws.com grep user-data: /var/log/syslog
# this one worked
ssh -i thesis.pem ec2-user@ec2-54-172-66-106.compute-1.amazonaws.com cat /var/log/user-data.log 
ssh -i thesis.pem ec2-user@ cat /var/log/user-data.log 
ssh -i thesis.pem ec2-user@

ec2-get-console-output i-0c9e9461 | grep user-data:

---
which python
which pip
which virtualenv
#sudo alternatives --set python /usr/bin/python2.6
python --version

# Amazon Linux, ec2-user
sudo yum -y update
sudo pip install --upgrade pip
mkdir venv
cd venv
virtualenv tc
source tc/bin/activate

pip install oauthlib
pip install requests
pip install requests-oauthlib
pip install six
pip install tweepy
pip install wheel
pip install boto
pip install sh


#notes -- $ pip install -r requirements.txt --no-index --find-links file:///tmp/packages

# for loop in one line - bash
for i in $inst; do echo $i; done 

# makedate
dt=$(date '+%Y%m%d %H:%M:%S');


# crontab stuff
# GREAT crontab
http://serverfault.com/questions/449651/why-is-my-crontab-not-working-and-how-can-i-troubleshoot-it
http://askubuntu.com/questions/117978/script-doesnt-run-via-crontab-but-works-fine-standalone
# check logs
sudo cat /var/log/cron
cat /etc/crontab
# See whats happening
crontab -l
# edit it
crontab -e 
* * * * * aws s3 cp /tmp/twit-candi-2016/dist s3://twit-candi-2016/data/ --recursive
* * * * * aws s3 cp /tmp/twit-candi-2016/dist s3://twit-candi-2016/data/`date +"\%Y\%m\%d.\%H\%M\%S"`/ --recursive --exclude "creds.json"

dt=$(date '+%Y%m%d.%H%M%S');
echo "* */1 * * * root aws s3 cp /tmp/twit-candi-2016/dist s3://twit-candi-2016/data/$dt/ --recursive --exclude creds.json" >> /etc/crontab

# check the python output
sudo cat /var/log/messages


cat config.json | jq '.folders'[]
fd=`cat config.json | jq -r '.folders'[]`
for f in $fd; do mkdir -p $f; done
python tc_app



# size of all the buckets
aws s3 ls s3://twit-candi-2016/data --recursive | awk 'BEGIN {total=0}{total+=$3}END{print total/1024/1024" MB"}'

# get jq
sudo wget https://stedolan.github.io/jq/download/linux64/jq 
sudo chmod +x ./jq
sudo cp jq /usr/bin

# of the tweepy file dump - just aline of objects, not an array
cat clinton/clinton1 | jq '.user'
cat clinton/clinton1 | jq '.user.id'
cat clinton/clinton1 | jq '.text'
cat clinton/clinton1 | jq '.created_at'
cat clinton/clinton1 | jq '.retweeted'
cat clinton/clinton1 | jq '.entities.user_mentions'
cat clinton/clinton1 | jq '.entities.hashtags'
# pretty print the JSON
cat clinton/clinton4 | jq '.'
cat config.json | jq '.categories | length'

cat clinton/clinton2 | jq '.entities.user_mentions[].screen_name'
cat clinton/clinton2 | jq '.entities.hashtags[].text'
cat clinton/clinton1 | jq '.user.screen_name'

cat config.json | jq '.'
cat config.json | jq '.folders | length'
cat config.json | jq '.candidates | length'
cat config.json | jq '.categories | length'
cat config.json | jq '.useHash | length'
cat config.json | jq '.useNonHash | length'
cat config.json | jq '.words | length'

show dbs
# this is from OS shell
mongoimport -d test -c clinton test/clinton/clinton4 
# this is from mongo shell
db.clinton.find({"timestamp_ms":"1437421308354"})

# loop through directories only
for f in */; do echo $f; done
# most recent file
ls -t clinton | head -n1
# remove last line in place
sed -i '' -e '$ d' clinton/clinton2

fd=`for f in */; do echo $f; done`
lastones=`for f in */; do ls -t $f | head -n1; done`
echo $lastones

for f in */; do
  fname=`ls -t $f | head -n1`
  echo $f$fname
#echo $f; 
done
for f in */; do fname=`ls -t $f | head -n1 `; echo $f$fname; done

lastones=`for f in */; do fname=\`ls -t $f | head -n1 \`; echo $f$fname; done`

##

import json
from pprint import pprint

with open('config.json') as data_file:    
    data = json.load(data_file)
head
pprint(data)

print data["folders"]
print data["folders"][1]

print data["words"][0]
print data["words"][1]

c = data["folders"]
print c[1]

. tc_s3_upload.sh twit-candi-2016/dist/ 
aws ec2 terminate-instances --instance-ids 
aws ec2 run-instances --count 1 \
    --image-id $ami_id \
    --iam-instance-profile Arn=arn:aws:iam::520531084022:instance-profile/access-buckets \
    --key-name thesis \
    --security-groups triciajam_SG_useast \
    --instance-type t2.micro \
    --user-data file://tc_aws_start.sh 


# these all work
sudo crontab -l -u ec2-user | cat - crontrish  | sudo crontab -u ec2-user -
{ sudo crontab -l -u ec2-user; echo "*/1 * * * * echo \"hiya\" >> /tmp/trish"; }  | sudo crontab -u ec2-user -
# not sure about this one
{ crontab -l; echo "1 */1 * * * ${script_dir}/tc_cron_start.sh ${base_dir} tc_application.py >> ${log_dir}/crlog 2>&1"; } | crontab -u ec2-user -

# actual crontab
[ec2-user@ip-172-31-34-202 twit-candi-2016]$ crontab -l
13 */1 * * * /tmp/scripts/tc_cron_start.sh tc_application.py >> /tmp/log/crlog 2>&1
26 */1 * * * /tmp/scripts/tc_cron_stop.sh tc_application.py >> /tmp/log/crlog 2>&1
30 23 * * * /tmp/scripts/tc_app_daily_clean.sh >> /tmp/log/cleanlog 2>&1

aws s3 ls s3://twit-candi-2016/data --recursive  | grep -v -E "(Bucket: |Prefix: |LastWriteTime|^$|--)" | awk 'BEGIN {total=0}{total+=$3}END{print total/1024/1024" MB"}'

############################
# NEW SETUP
# CHANGE THE DIRECTORIES

echo 'export app_dir=~/twit-candi-2016' >> /home/ec2-user/.bash_profile
echo 'export data_dir=~/twit-candi-2016/data' >> /home/ec2-user/.bash_profile
echo 'export script_dir=~/twit-candi-2016/dist' >> /home/ec2-user/.bash_profile
echo 'export log_dir=~/twit-candi-2016/log' >> /home/ec2-user/.bash_profile
echo 'export old_dir=~/twit-candi-2016/old' >> /home/ec2-user/.bash_profile
. ~/.bash_profile


mkdir -p ${app_dir}/venv
cd ${app_dir}/venv
virtualenv tc
source tc/bin/activate

echo "** Upgrading Packages"
yum -y update

echo "** Upgrading Pip"
pip install --upgrade pip
#hash -r
#ln -s /usr/local/bin/pip-2.7 /usr/bin/pip 

echo "** Installing jq"
yum -y install jq

echo "** Installing Python Dependencies"
pip install oauthlib
pip install requests
pip install requests-oauthlib
pip install six
pip install tweepy
pip install wheel
pip install boto
pip install sh

# grab the script and JSON files
cd $app_dir
mkdir -p $script_dir
echo "** Retrieving application scripts"
aws s3 sync s3://twit-candi-2016/dist2/ $script_dir --dryrun
chmod 777 ${script_dir}/*.py
chmod 777 ${script_dir}/*.sh

echo "** Setting up app"
. ${script_dir}/tc_app_setup.sh

echo "** Making backup directory"
mkdir -p $old_dir
echo "** Making log directory"
mkdir -p $log_dir

echo "** Setting owner to ec2-user"
chown -R ec2-user:ec2-user $app_dir

echo "** Setting up cron."
dt=$(date '+%Y%m%d.%H%M%S');
# run every hour

{ crontab -l -u ec2-user; echo "1 */1 * * * ${script_dir}/tc_cron_start.sh tc_application.py >> ${log_dir}/crlog 2>&1"; } | crontab -u ec2-user -
{ crontab -l -u ec2-user; echo "13 */1 * * * ${script_dir}/tc_cron_stop.sh tc_application.py >> ${log_dir}/crlog 2>&1"; } | crontab -u ec2-user -
{ crontab -l -u ec2-user; echo "30 23 * * * ${script_dir}/tc_app_daily_clean.sh >> ${log_dir}cleanlog 2>&1"; } | crontab -u ec2-user -

crontab -l -u ec2-user
